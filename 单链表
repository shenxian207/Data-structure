#include <iostream>
#include <stdlib.h>
using namespace std;

//单链表
template<class T,class E>
struct LinkNode                //链表节点类
{
    E data;                    //数据域
    LinkNode<T,E> *link;       //指针域
    LinkNode(){link=NULL;}     //构造函数
    LinkNode(E item,LinkNode<T,E> *ptr=NULL){data=item;link=ptr;}
    bool operator==(T x){return data.key==x;}     //重载函数，判定是否相等
    bool operator!=(T x){return data.key!=x;}     //重载函数，判定是否不等
};
template<class T,class E>
class List
{
protected:
    LinkNode<T,E> *first;      //定义表头指针
public:
    List(){first=new LinkNode<T,E>;}         //构造函数
    List(E x){first=new LinkNode<T,E>(x);}   //定义指针
    List(List<T,E>& L);                      //复制构造函数
    ~List(){}                                //析构函数
    void makeEmpty();                        //置空函数
    int Length() const;                     //返回链表的长度
    LinkNode<T,E> *Search(T x);              //搜索含x的节点
    LinkNode<T,E> *Locate(int i);            //定位第i个元素
    E *getData(int i);                       //取出第i个元素的值
    void setData(int i,E x);                     //更新第i个元素的值
    bool Insert(int i,E x);                  //在第i个元素后插入
    bool Remove(int i,E& x);                  //删除第i个元素
    bool IsEmpty() const{return first->link==NULL?true:false;}  //判断是否为空
    LinkNode<T,E> *getFirst() const {return first;}      //返回首节点
    void setFirst(LinkNode<T,E> *f){first=f;}            //更新首节点
    int MaxFind();        //找到链表中的最大数据
    void Sort();          //排序函数
};
template<class T,class E>
void List<T,E>::makeEmpty()       //链表置空，保留头结点
{
    LinkNode<T,E> *q;
    while(first->link!=NULL)
    {
        q=first->link;            //保存被删节点
        first->link=q->link;      //将该节点地址赋给头结点
        delete q;                 //删除节点
    }
}
template<class T,class E>
int List<T,E>::Length() const      //返回链表长度
{
    LinkNode<T,E> *p=first->link;  //定位到头节点
    int count=0;
    while(p!=NULL)
    {
        p=p->link;                  //遍历节点
        count++;
    }
    return count;
}
template<class T,class E>
void List<T,E>::setData(int i,E x)
{
    Locate(i)->data=x;
}
template<class T,class E>
LinkNode<T,E> *List<T,E>::Search(T x)        //搜索函数
{
    LinkNode<T,E> *current=first->link;      //定位到头指针
    while(current!=NULL&&current->data!=x)   //判断搜索条件
    {
        current=current->link;               //指针向后移动
    }
    return current;                          //返回搜索节点
}
template<class T,class E>
LinkNode<T,E> *List<T,E>::Locate(int i)      //定位算法
{
    if(i<0){return NULL;}                    //判断i是否合理
    LinkNode<T,E> *current=first;
    int k=0;
    while(current!=NULL&&k<i)                //遍历链表
    {
        current=current->link;
        k++;
    }
    return current;                          //返回待定位节点
}
template<class T,class E>
bool List<T,E>::Insert(int i,E x)                 //插入节点，到第i个节点的后面
{
    LinkNode<T,E> *current=Locate(i);
    if(current==NULL){return false;}
    LinkNode<T,E> *newNode=new LinkNode<T,E>(x);  //创建新节点
    newNode->link=current->link;                  //将新节点连接到i+1节点上
    current->link=newNode;                        //将第i个节点连到新节点上
    return true;
}
template<class T,class E>
bool List<T,E>::Remove(int i,E& x)                //删除第i个节点
{
    LinkNode<T,E> *current=Locate(i-1);          //定位到第i-1个节点
    if(current==NULL||current->link==NULL) {return false;}
    LinkNode<T,E> *del=current->link;            //表示第i个节点
    current->link=del->link;                     //将第i-1个节点连接到第i个节点上
    x=del->data;                                 //保存删除的数据
    delete del;    //删除指针
    return true;
}
template<class T,class E>
int List<T,E>::MaxFind()
{
    LinkNode<T,E> *current=first->link;
    int max=current->data;
    while(current->link!=NULL)
    {
        if(current->link->data > max)
        {
            max=current->link->data;
        }
        current=current->link;
    }
    return max;
}
template<class T,class E>
void inputRear(T endTag,List<T,E> &L)            //后插法建立链表
{
    LinkNode<T,E> *newNode,*last;
    E val;
    last=new LinkNode<T,E>;
    L.setFirst(last);                        //此时的last节点为头结点
    cin >> val;
    while(val!=endTag)
    {
        newNode=new LinkNode<T,E>(val);
        last->link=newNode;
        last=newNode;                       //插入到链表末端
        cin >> val;
    }
    last->link=NULL;
}
template <class T, class E>                   //前插法建立链表
void inputFront (T endTag, List<T,E>& L)
{
    LinkNode<T,E> *newNode,*first;
    E val;
    first=new LinkNode<T,E>;
    L.setFirst(first);
    cin >> val;
    while(val!=endTag)
    {
        newNode=new LinkNode<T,E>(val);
        newNode->link=first->link;
        first->link=newNode;
        cin >>val;
    }
}
int main()                     //测试主函数
{
    //List<int,int> list_r;
    List<int,int> list_f;
    //inputRear(5,list_r);
    inputFront(5,list_f);

    cout << list_f.MaxFind();

    //cout << list_f.Locate(3)->data << endl;
    //list_f.Insert(2,9);
    //cout << list_f.Locate(3)->data <<endl;
    //int x;
    //list_f.Remove(3,x);
    //cout << list_f.Locate(3)->data;
    //cout << list_f.Length() << endl;
    //list_f.setData(2,9);
    //cout << list_f.Locate(2)->data;
    //list.setData(1,3);
    //list.setData(2,4);
    //list.setData(3,5);
    //cout << list.Length();
    //cout << list.Locate(2)->data;

    /*int x;
    if(list.Remove(3,x))
    {
        cout << list.Locate(3)->data << endl;
        cout << x;
    }

    if(list.Insert(2,8))
    {
        cout << list.Locate(3)->data;
    }*/

    return 0;
}


/*template <class T, class E>                   //前插法建立链表
void inputFront (T endTag, List<T,E>& L)
{
    LinkNode<T,E> *newNode,*newF;
    E val;
    newF=new LinkNode<T,E>;
    L.setFirst(newF);
    cin >> val;
    while(val!=endTag)
    {
        newNode=new LinkNode<T,E>(val);
        newNode->link=newF->link;
        newF->link=newNode;
        cin >> val;
    }
}*/



/*
bool List::Insert(int i,int x)        //插入节点
{
    if(first==NULL||i==0)
    {
        LinkNode *newNode=new LinkNode(x);
        newNode->link=first;
        first=newNode;
    }
    else
    {
        LinkNode *current=first;
        int k=1;
        while(k<i&&current!=NULL)
        {
            current=current->link;
            k++;
        }
        if(current==NULL&&first!=NULL)
        {
            cout << "无效的插入位置！" <<endl;
            return false;
        }
        else
        {
            LinkNode *newNode=new LinkNode(x);
            newNode->link=current->link;
            current->link=newNode;
        }
    }
    return true;
}
bool List::Remove(int i,int& x)      //删除节点
{
    LinkNode *del;
    if(i<=1)
    {
        del=first;
        first->link;
    }
    else
    {
        LinkNode *current=first;
        k=1;
        while(k<i-1&&current!=NULL)
        {
            current=current->link;
            k++;
        }
        if(current==NULL||current->link==NULL)
        {
            cout<< "无效的删除位置！" <<endl;
            return false;
        }
        del=current->link;
        current->link=del->link;
    }
    x=del->data;
    delete del;
    return true;
}*/
