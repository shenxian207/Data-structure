#include <iostream>
using namespace std;

struct LinkNode
{
    int Data;
    LinkNode *link;
    LinkNode(){link=NULL;}
    LinkNode(int d,LinkNode *ptr=NULL){Data=d;link=ptr;}
};
class List
{
public:
    LinkNode *first;
    List(){first=new LinkNode;}
    List(int val){first=new LinkNode(val);}
    ~List(){};
    void SetFirst(LinkNode *f){first=f;}
    int Length();
    void Print();
    LinkNode* Locate(int i);
    bool Search(int d);
    void Insert(int i,int val);
    void Del(int i);
};
int List::Length()
{
    int k=0;
    LinkNode *current=first;
    while(current!=NULL)
    {
        k++;
        current=current->link;
    }
    return k;
}
void List::Print()
{
    if(this==NULL)
    {cout << "NULL";}
    else{
    LinkNode *current;
    current=this->first->link;
    while(current!=NULL)
    {
        cout << current->Data;
        if(current->link!=NULL)
        {
            cout << " ";
        }
        current=current->link;
    }
    }
}
LinkNode* List::Locate(int i)
{
    LinkNode *current;
    current=first;
    int k=0;
    while(current!=NULL&&k<i)
    {
        current=current->link;
        k++;
    }
    return current;
}
bool List::Search(int d)
{
    LinkNode *current;
    current=this->first->link;
    while(current!=NULL)
    {
        if(current->Data==d)
        {
            return true;
        }
        else
        {
            current=current->link;
        }
    }
    return false;
}
void List::Insert(int i,int val)
{
    LinkNode *current=Locate(i);
    LinkNode *newNode=new LinkNode(val);
    newNode->link=current->link;
    current->link=newNode;
}
void List::Del(int i)
{
    LinkNode *current=Locate(i-1);
    LinkNode *del=current->link;
    current->link=del->link;
    delete del;
}
void CreatRear(List &my_list,int endTag)
{
    LinkNode *last,*newNode;
    last=new LinkNode;
    my_list.SetFirst(last);
    int val;
    cin >> val;
    while(val!=endTag)
    {
        newNode=new LinkNode(val);
        last->link=newNode;
        last=newNode;
        cin >> val;
    }
    last->link=NULL;
}
void Union(List &list1,List &list2)
{
    int m=list1.Length(),n=list2.Length();
    for(int i=1;i<n;i++)
    {
        int d=list2.Locate(i)->Data;
        if(!(list1.Search(d)))
        {
            list1.Insert(m-1,d);
        }
        //list1.Insert(m-1,d);
    }
}
void sort_list(List &my_list)
{
    int l=my_list.Length()-1;
    for(int i=1;i<l;i++)
    {
        int m=my_list.Locate(i)->Data;
        for(int j=i+1;j<=l;j++)
        {
            int n=my_list.Locate(j)->Data;
            if(m>n)
            {
                my_list.Locate(i)->Data=n;
                my_list.Locate(j)->Data=m;
                m=my_list.Locate(i)->Data;
                n=my_list.Locate(j)->Data;
            }
        }
    }
}
int main()
{
    List my_list1,my_list2;
    int endTag=-1;
    CreatRear(my_list1,endTag);
    CreatRear(my_list2,endTag);
    Union(my_list1,my_list2);
    sort_list(my_list1);
    my_list1.Print();
    return 0;
}
